/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package TextGame;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ImageIcon;
import javax.swing.Timer;

/**
 *
 * @author Gabriel
 */
public class TextGameDisplay extends javax.swing.JFrame {

    /**
     * Creates new form TextGameDisplay
     */
    public TextGameDisplay() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        classSelection = new javax.swing.JComboBox();
        attack1 = new javax.swing.JButton();
        attack2 = new javax.swing.JButton();
        attack3 = new javax.swing.JButton();
        className = new javax.swing.JLabel();
        enemyName = new javax.swing.JLabel();
        enemyHealth = new javax.swing.JLabel();
        playerHealth = new javax.swing.JLabel();
        playerMana = new javax.swing.JLabel();
        nextFight = new javax.swing.JButton();
        gameStatusPlayer = new javax.swing.JLabel();
        gameStatusEnemy = new javax.swing.JLabel();
        attackLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        classSelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Warrior", "Mage", "Ranger", "Rogue" }));
        classSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classSelectionActionPerformed(evt);
            }
        });

        attack1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attack1ActionPerformed(evt);
            }
        });

        attack2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attack2ActionPerformed(evt);
            }
        });

        attack3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attack3ActionPerformed(evt);
            }
        });

        className.setText("Class");

        enemyName.setText("Enemy");

        enemyHealth.setText("Health:");

        playerHealth.setText("Health:");

        playerMana.setText("Mana:");

        nextFight.setText("Next Fight!");
        nextFight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextFightActionPerformed(evt);
            }
        });

        gameStatusPlayer.setText("Game Status Player");

        gameStatusEnemy.setText("Game Status Enemy");

        attackLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(classSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(256, 256, 256)
                        .addComponent(nextFight)
                        .addGap(0, 341, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(126, 126, 126)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(className, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                .addComponent(playerHealth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(playerMana, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(attackLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(81, 81, 81)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(gameStatusPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(gameStatusEnemy, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(enemyHealth, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(enemyName, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(88, 88, 88))
            .addGroup(layout.createSequentialGroup()
                .addGap(157, 157, 157)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(attack1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(attack2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(attack3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(575, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(classSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nextFight)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(className)
                            .addComponent(enemyName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(gameStatusPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(attackLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enemyHealth, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playerHealth, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gameStatusEnemy, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(playerMana, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(attack1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(attack2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(attack3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void classSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classSelectionActionPerformed
        if (classChosen == false) {

            if (classSelection.getSelectedItem() == "Warrior") {
                className.setText("Warrior");
                attack1.setText("Sword Swing");
                attack2.setText("Poisoned Blade");
                attack3.setText("Fliery Sword");

                methods.playerStats(120, 16, 10, 50, 120, 50, 20, 25, 30);

                playerHealth.setText("Health: " + mainPlayerArray[0] + "/" + mainPlayerArray[4]);
                playerMana.setText("Mana: " + mainPlayerArray[3] + "/" + mainPlayerArray[5]);
            }

            if (classSelection.getSelectedItem() == "Mage") {
                className.setText("Mage");
                attack1.setText("Mage Blast");
                attack2.setText("Poison Spread");
                attack3.setText("Fireball");

                methods.playerStats(100, 5, 10, 150, 100, 150, 20, 25, 30);

                playerHealth.setText("Health: " + mainPlayerArray[0] + "/" + mainPlayerArray[4]);
                playerMana.setText("Mana: " + mainPlayerArray[3] + "/" + mainPlayerArray[5]);
            }

            if (classSelection.getSelectedItem() == "Ranger") {
                classStringName = "ranger";
                animationFrames = 9;
                frameOne = new ImageIcon("src/resources/" + classStringName + "1.png");
                attackLabel.setIcon(frameOne);
                //System.out.println("src/resources/" + classStringName + "1.png");

                className.setText("Ranger");
                attack1.setText("Bow Shot");
                attack2.setText("Posioned Arrow");
                attack3.setText("Fire Blast Arrow");

                methods.playerStats(100, 7, 10, 100, 100, 100, 20, 25, 30);

                playerHealth.setText("Health: " + mainPlayerArray[0] + "/" + mainPlayerArray[4]);
                playerMana.setText("Mana: " + mainPlayerArray[3] + "/" + mainPlayerArray[5]);
            }

            if (classSelection.getSelectedItem() == "Rogue") {
                className.setText("Rogue");
                attack1.setText("Dual Daggers");
                attack2.setText("Poisoned Dagger");
                attack3.setText("Burning Blades");

                methods.playerStats(80, 3, 30, 110, 80, 110, 20, 25, 30);

                playerHealth.setText("Health: " + mainPlayerArray[0] + "/" + mainPlayerArray[4]);
                playerMana.setText("Mana: " + mainPlayerArray[3] + "/" + mainPlayerArray[5]);
            }
        }
        classChosen = true;
    }//GEN-LAST:event_classSelectionActionPerformed

    private void nextFightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextFightActionPerformed
        if (methods.enemyArray[0] <= 0 && gameOver == false) {
            methods.randEnemyStats();
            enemyName.setText(methods.randEnemyName());
            enemyHealth.setText("Health: " + mainEnemyArray[0] + "/" + mainEnemyArray[4]);
            methods.playerArray[0] = methods.playerArray[4];
            methods.playerArray[3] = methods.playerArray[5];
            playerHealth.setText("Health: " + methods.playerArray[0] + "/" + methods.playerArray[4]);
            playerMana.setText("Mana: " + methods.playerArray[3] + "/" + methods.playerArray[5]);
            gameStatusPlayer.setText("Prepare for Battle!");

        }
    }//GEN-LAST:event_nextFightActionPerformed

    private void attack1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attack1ActionPerformed
        playerAttack(1);
        enemyAttack();
        gameOverTest();
    }//GEN-LAST:event_attack1ActionPerformed

    private void attack2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attack2ActionPerformed
        playerAttack(2);
        enemyAttack();
        gameOverTest();
    }//GEN-LAST:event_attack2ActionPerformed

    private void attack3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attack3ActionPerformed
        playerAttack(3);
        enemyAttack();
        gameOverTest();
    }//GEN-LAST:event_attack3ActionPerformed

    public static void main(String args[]) {
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TextGameDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TextGameDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TextGameDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TextGameDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TextGameDisplay().setVisible(true);
            }
        });

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton attack1;
    private javax.swing.JButton attack2;
    private javax.swing.JButton attack3;
    public javax.swing.JLabel attackLabel;
    private javax.swing.JLabel className;
    private javax.swing.JComboBox classSelection;
    private javax.swing.JLabel enemyHealth;
    private javax.swing.JLabel enemyName;
    private javax.swing.JLabel gameStatusEnemy;
    private javax.swing.JLabel gameStatusPlayer;
    private javax.swing.JButton nextFight;
    private javax.swing.JLabel playerHealth;
    private javax.swing.JLabel playerMana;
    // End of variables declaration//GEN-END:variables
    Methods methods = new Methods();
    boolean classChosen = false;
    boolean gameOver = false;
    int damageResultPlayer;
    int damageResultEnemy;
    int mainPlayerArray[] = methods.getPlayerArray();
    int mainEnemyArray[] = methods.getEnemyArray();
    int animationFrames;
    int frameOfAnimation = 0;
    ImageIcon frame;
    Timer aniTimer;
    String classStringName;
    ImageIcon frameOne;

    public void attackAnimation() {
        aniTimer = new Timer(200, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (frameOfAnimation == animationFrames) {
                    aniTimer.stop();
                }
                frameOfAnimation++;
                frame = new ImageIcon("src/resources/" + classStringName + frameOfAnimation + ".png");
                attackLabel.setIcon(frame);
            }
        });
        aniTimer.start();
    }

    public void playerAttack(int type) {
        int attackType = 0;
        if (type == 1) {
            attackType = mainPlayerArray[6];
        }
        if (type == 2) {
            attackType = mainPlayerArray[7];
        }
        if (type == 3) {
            attackType = mainPlayerArray[8];
        }

        if (methods.hitOrNot(mainPlayerArray[2]) == true && gameOver == false) {//player attack
            
            attackAnimation();
            frameOne = new ImageIcon("src/resources/" + classStringName + "1.png");
                    attackLabel.setIcon(frameOne);
            
            damageResultPlayer = methods.damageResult(attackType, mainEnemyArray[1]);
            mainEnemyArray[0] = mainEnemyArray[0] - damageResultPlayer;
            enemyHealth.setText("Health: " + mainEnemyArray[0] + "/" + mainEnemyArray[4]);
            gameStatusPlayer.setText("Damage Dealt: " + damageResultPlayer);
            if (type == 2) {
                mainPlayerArray[3] = mainPlayerArray[3] - 20;
                playerMana.setText("Mana: " + methods.playerArray[3] + "/" + methods.playerArray[5]);
            }
            if (type == 3) {
                mainPlayerArray[3] = mainPlayerArray[3] - 30;
                playerMana.setText("Mana: " + methods.playerArray[3] + "/" + methods.playerArray[5]);
            }
            if (mainEnemyArray[0] <= 0) {
                mainEnemyArray[0] = 0;
                enemyHealth.setText("Health: " + mainEnemyArray[0]);
                gameStatusPlayer.setText("Enemy Killed!");
                gameStatusEnemy.setText("Enemy has died.");
            }

        } else if (methods.hitOrNot(mainEnemyArray[2]) == false && gameOver == false) {
            gameStatusPlayer.setText("Your Attack Missed");
        }
    }

    public void enemyAttack() {
        if (methods.hitOrNot(mainPlayerArray[2]) == true && gameOver == false && mainEnemyArray[0] > 0) {//enemy attack
            damageResultEnemy = methods.damageResult(mainEnemyArray[3], mainPlayerArray[1]);
            mainPlayerArray[0] = mainPlayerArray[0] - damageResultEnemy;
            playerHealth.setText("Health: " + mainPlayerArray[0] + "/" + mainPlayerArray[4]);
            gameStatusEnemy.setText("Damage Dealt: " + damageResultEnemy);
        } else if (methods.hitOrNot(mainPlayerArray[2]) == false && gameOver == false && mainEnemyArray[0] > 0) {
            gameStatusEnemy.setText("Enemy's Attack Missed");
        }
    }

    public void gameOverTest() {
        if (mainPlayerArray[0] <= 0) {
            mainPlayerArray[0] = 0;
            playerHealth.setText("Health: " + methods.getPlayerArray()[0] + "/" + methods.getPlayerArray()[4]);
            gameOver = true;
            gameStatusPlayer.setText("Game Over!");
        }
    }
}
